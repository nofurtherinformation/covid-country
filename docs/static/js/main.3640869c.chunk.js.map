{"version":3,"sources":["components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["DATA_URL","state_boundaries","process","county_boundaries","dirLight","DirectionalLight","color","intensity","direction","_shadow","ambientLight","AmbientLight","colors","breaks","colorScale","d3","domain","range","Map","validDates","tempList","currDate","moment","add","format","slice","push","dateList","useState","latitude","longitude","zoom","pitch","bearing","initialViewState","lightingEffect","LightingEffect","shadowColor","effects","centroidData","setCentroidData","timeInterval","setTimeInterval","setCurrDate","callback","delay","savedCallback","useRef","intervalId","currentDelay","setDelay","toggleRunning","useCallback","clear","clearInterval","current","useEffect","tick","setInterval","useInterval","t","a","toggle","running","document","addEventListener","event","preventDefault","then","data","layers","SolidPolygonLayer","coordinateSystem","COORDINATE_SYSTEM","METER_OFFSETS","id","opacity","getPolygon","d","stroked","filled","getFillColor","PolygonLayer","lineWidthMinPixels","getLineColor","getLineWidth","ColumnLayer","diskResolution","radius","material","extruded","pickable","elevationScale","getPosition","x","y","val","r","g","b","handleColor","getElevation","updateTriggers","transitions","idle","onClick","Slider","value","onMouseDown","onChange","e","newVal","min","max","step","aria-labelledby","indexOf","length","href","target","rel","src","alt","reverse","map","item","index","parseInt","style","backgroundColor","controller","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3640869c.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef, useCallback} from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {LightingEffect, DirectionalLight, AmbientLight } from '@deck.gl/core';\r\nimport {SolidPolygonLayer, PolygonLayer, ColumnLayer } from '@deck.gl/layers';\r\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\r\nimport Slider from '@material-ui/core/Slider';\r\n// import {SphereGeometry, IcoSphereGeometry} from '@luma.gl/core'\r\nimport * as moment from 'moment';\r\nimport * as d3 from 'd3';\r\n\r\nconst DATA_URL = {\r\n    state_boundaries: `${process.env.PUBLIC_URL}/data/state_borders.json`,\r\n    county_boundaries: `${process.env.PUBLIC_URL}/data/county_borders.json`\r\n}\r\n\r\nconst dirLight = new DirectionalLight({\r\n    color: [128, 128, 0],\r\n    intensity: 5.0,\r\n    direction: [0, -100, -100],\r\n    _shadow: true\r\n  });\r\n\r\nconst ambientLight = new AmbientLight({\r\n    color: [180,220,220],\r\n    intensity: 3\r\n});\r\n\r\nconst colors = [\r\n    '#0D0887',\r\n    '#5C01A6',\r\n    '#9C179E',\r\n    '#CB4679',\r\n    '#ED7953',\r\n    '#FDB42F',\r\n    '#F0F921',\r\n    '#F0F921'\r\n]\r\n\r\nconst breaks = [\r\n    0,\r\n    .03,\r\n    .05,\r\n    .10,\r\n    .15,\r\n    .20,\r\n    .25,\r\n    1000\r\n]\r\n\r\nconst colorScale = d3.scaleLinear()\r\n    .domain(breaks)\r\n    .range(colors)\r\n\r\nconst handleColor = (val) => {\r\n    let color = d3.color(colorScale(val))\r\n    if (color === null) return [240,240,240]\r\n    return [color.r, color.g, color.b, 150]\r\n}\r\n\r\n/* eslint-disable react/no-deprecated */\r\nconst Map = () => {\r\n\r\n    const dateList = () => {\r\n        let tempList = ['2020-02-01']\r\n        let currDate = '2020-02-01'\r\n\r\n        while (currDate < '2021-01-18') {\r\n            let tempDate = moment(currDate, 'YYYY-MM-DD')\r\n            currDate = tempDate.add(1, 'day').format().slice(0,10)\r\n            tempList.push(currDate)\r\n        }\r\n\r\n        return tempList\r\n        \r\n    }\r\n\r\n    let validDates = dateList()\r\n\r\n    const [initialViewState, setInitialViewState] = useState({\r\n        latitude: 0,\r\n        longitude: 0,\r\n        zoom: 4.75,\r\n        pitch:40,\r\n        bearing:0\r\n    });\r\n\r\n    const [effects] = useState(() => {\r\n        const lightingEffect = new LightingEffect({dirLight, ambientLight});\r\n        lightingEffect.shadowColor = [0, 0, 0, 0.15];\r\n        return [lightingEffect];\r\n    });\r\n\r\n    const [timerId, setTimerId] = useState(null)\r\n    const [centroidData, setCentroidData] = useState([])\r\n    const [timeInterval, setTimeInterval] = useState(800)\r\n    \r\n    const [currDate, setCurrDate] = useState(['2020-02-01']);\r\n\r\n    const [toggle, running] = useInterval(() => {\r\n        setCurrDate(t => {\r\n            if (t < '2021-01-19') {\r\n                var a = moment(t, 'YYYY-MM-DD')\r\n                a = a.add(1, 'day')\r\n                return a.format().slice(0,10)\r\n            } else {\r\n                return t\r\n            }\r\n        })\r\n    }, 1000-timeInterval);\r\n  \r\n    const resetDate = () => setCurrDate('2020-02-01');\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('contextmenu', event => event.preventDefault());\r\n\r\n        d3.csv(`${process.env.PUBLIC_URL}/data/centroids_testing_albers.csv`, d3.autoType)\r\n            .then(data => { setCentroidData(data) })\r\n    },[])\r\n\r\n    const layers =  [ \r\n        new SolidPolygonLayer({\r\n            coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\r\n            id: 'background',\r\n            data: [\r\n                [[-400_000, 240_000], [440_000, 240_000], [440_000, -240_000], [-400_000, -240_000]]\r\n            ],\r\n            opacity: 1,\r\n            getPolygon: d => d,\r\n            stroked: false,\r\n            filled: true,\r\n            getFillColor: [15,15,15],\r\n        }),\r\n        new PolygonLayer({\r\n            id: 'county-layer',\r\n            coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\r\n            data: DATA_URL.county_boundaries,\r\n            getPolygon: d=> d,\r\n            stroked: true,\r\n            filled: false,\r\n            lineWidthMinPixels: 1,\r\n            getLineColor: [240, 240, 240, 10],\r\n            getLineWidth: 1\r\n        }),\r\n        new PolygonLayer({\r\n            id: 'polygon-layer',\r\n            coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\r\n            data: DATA_URL.state_boundaries,\r\n            getPolygon: d=> d,\r\n            stroked: true,\r\n            filled: false,\r\n            lineWidthMinPixels: 1,\r\n            getLineColor: [240, 240, 240, 25],\r\n            getLineWidth: 1\r\n        }),\r\n        // new SimpleMeshLayer({\r\n        //     id: 'mesh-layer',\r\n        //     coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\r\n        //     data: centroidData,\r\n        //     mesh: geom,\r\n        //     wireframe: true,\r\n        //     getPosition: d => [d.x,d.y],\r\n        //     getColor: d => {\r\n        //         let tempVal = d[`pos_${currDate}`]*(counter/100)+(d[`pos_${currDate}`]*((100-counter)/100))\r\n        //         return handleColor(tempVal)\r\n        //     },\r\n        //     getScale: d => [2500, 2500, (d[`pos_${currDate}`]*(counter/100)+(d[`pos_${currDate}`]*((100-counter)/100)))*500000],\r\n        //     getTranslation: d => [0, 0, (d[`pos_${currDate}`]*(counter/100)+(d[`pos_${currDate}`]*((100-counter)/100)))*500000],\r\n        //     // getScale: d => [(d[`tcap_${currDate}`]*(counter/100)+(d[`tcap_${currDate}`]*((100-counter)/100)))*20,\r\n        //     //                 (d[`tcap_${currDate}`]*(counter/100)+(d[`tcap_${currDate}`]*((100-counter)/100)))*20, \r\n        //     //                 (d[`tcap_${currDate}`]*(counter/100)+(d[`tcap_${currDate}`]*((100-counter)/100)))*100], \r\n        //     updateTriggers: {\r\n        //         getTranslation: [currDate],\r\n        //         getScale: [currDate, counter],\r\n        //         getColor: [currDate, counter]\r\n        //     }\r\n        // }),\r\n        new ColumnLayer({\r\n            id: 'line-layer',\r\n            coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\r\n            data: centroidData,\r\n            diskResolution: 6,\r\n            radius: 5000,\r\n            material:false,\r\n            extruded: true,\r\n            pickable: true,\r\n            elevationScale: 5000,\r\n            getPosition: d => [d.x,d.y],\r\n            getFillColor: d => handleColor(d[`pos_${currDate}`]),\r\n            getLineColor: [0, 0, 0],\r\n            getElevation: d => [(d[`pos_${currDate}`])*250],\r\n            updateTriggers: {\r\n                getFillColor: currDate,\r\n                getElevation: currDate,\r\n            },\r\n            transitions: {\r\n                getFillColor: 1000-timeInterval,\r\n                getElevation: 1000-timeInterval,\r\n            }\r\n        })\r\n    ]\r\n\r\n    const handleTimeInterval = (e, newVal) => {\r\n        setTimeInterval(newVal)\r\n    };\r\n\r\n    const handleDate = (e, newVal) => {\r\n        setCurrDate(validDates[newVal])\r\n    };\r\n\r\n    const idle = () => {}\r\n\r\n    return (\r\n        <div id=\"mapContainer\">\r\n            <div id=\"buttons\">\r\n                <button onClick={resetDate}>Reset</button>\r\n                <button onClick={toggle}>{running ? \"Pause\" : \"Resume\"}</button>\r\n                \r\n                <p id=\"playback-slider\" >\r\n                    Playback Speed\r\n                </p>\r\n                <Slider \r\n                    value={timeInterval} \r\n                    onMouseDown={running ? toggle : idle} \r\n                    onChange={handleTimeInterval} \r\n                    min={0}\r\n                    max={900}\r\n                    step={25}\r\n                    aria-labelledby=\"playback-slider\"\r\n                />\r\n\r\n                <p id=\"date-slider\" >\r\n                    Date Select\r\n                </p>\r\n                <Slider \r\n                    value={validDates.indexOf(currDate)}\r\n                    onMouseDown={running ? toggle : idle} \r\n                    onChange={handleDate} \r\n                    min={0}\r\n                    max={validDates.length-1}\r\n                    step={1}\r\n                    aria-labelledby=\"date-slider\"\r\n                />\r\n            </div>\r\n            <div id=\"title\">\r\n                <h1>COVID Testing Positivity Rates</h1>\r\n                <h2>7-Day Rolling Average of {currDate}</h2>\r\n            </div>\r\n            <div id=\"logo\">\r\n                <a href=\"https://theuscovidatlas.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <img src={`${process.env.PUBLIC_URL}/logo.svg`} alt=\"US Covid Atlas Logo\" />\r\n                </a>\r\n            </div>\r\n            <div id=\"attribution\">\r\n                <a href=\"https://theuscovidatlas.org/\" target=\"_blank\" rel=\"noopener noreferrer\">  \r\n                    <p>Learn more at USCovidAtlas.org</p>\r\n                </a>\r\n                <p>Testing data from CDC. State and County boundaries from US Census.</p>\r\n            </div>\r\n            <div id=\"scale\">\r\n                <div id=\"breaks\">\r\n                    {breaks.slice(1,-1).reverse().map((item, index) => <p>{index===0 ? '>' : ''}{parseInt(item*100)}%</p>)}\r\n                </div>\r\n                <div id=\"colors\">\r\n                    {colors.slice(0,-1).reverse().map(item => <span style={{backgroundColor: item}}></span>)}\r\n                </div>\r\n            </div>\r\n            <DeckGL \r\n                layers={layers} \r\n                initialViewState={initialViewState} \r\n                effects={effects}\r\n                controller={true}>\r\n            </DeckGL>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Thanks https://stackoverflow.com/a/56952253 @Ori Drori\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n    const intervalId = useRef(null);\r\n    const [currentDelay, setDelay] = useState(delay);\r\n  \r\n    const toggleRunning = useCallback(\r\n      () => setDelay(currentDelay => (currentDelay === null ? delay : null)),\r\n      [delay]\r\n    );\r\n  \r\n    const clear = useCallback(() => clearInterval(intervalId.current), []);\r\n  \r\n    // Remember the latest function.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n  \r\n      if (intervalId.current) clear();\r\n  \r\n      if (currentDelay !== null) {\r\n        intervalId.current = setInterval(tick, currentDelay);\r\n      }\r\n  \r\n      return clear;\r\n    }, [currentDelay, clear]);\r\n  \r\n    return [toggleRunning, !!currentDelay];\r\n}\r\n\r\nexport default Map","import React, {useState, useCallback} from 'react';\nimport Map from './components/Map';\nimport './App.css';\n\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}