{"version":3,"sources":["components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["MapContainer","styled","div","geom","IcoSphereGeometry","iterations","dirLight","SunLight","timestamp","color","intensity","_shadow","ambientLight","AmbientLight","colorScale","d3","domain","range","Map","useState","latitude","longitude","zoom","pitch","bearing","initialViewState","lightingEffect","LightingEffect","shadowColor","effects","currDate","setCurrDate","setOldDate","setTimerId","setTimerId2","centroidData","setCentroidData","counter","setCounter","useEffect","process","then","data","layers","SolidPolygonLayer","id","opacity","getPolygon","d","stroked","filled","getFillColor","SimpleMeshLayer","mesh","wireframe","getPosition","x","y","getColor","val","r","g","b","handleColor","getScale","updateTriggers","getTranslation","Button","onClick","setInterval","t","a","moment","format","slice","add","controller","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fbb0462.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {LightingEffect, _SunLight as SunLight, AmbientLight } from '@deck.gl/core';\r\nimport {SolidPolygonLayer, ScatterplotLayer } from '@deck.gl/layers';\r\nimport {SimpleMeshLayer} from '@deck.gl/mesh-layers';\r\nimport {SphereGeometry, IcoSphereGeometry} from '@luma.gl/core'\r\nimport styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport * as moment from 'moment';\r\nimport * as d3 from 'd3';\r\n\r\nconst MapContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    top:0;\r\n    left:0;\r\n    overflow:visible;\r\n    background:rgb(15,15,15);\r\n    color:white;\r\n    button {\r\n        color:white;\r\n    }\r\n`\r\n\r\nconst geom = new IcoSphereGeometry({\r\n    iterations: 1\r\n  });\r\n\r\nconst dirLight = new SunLight({\r\n    timestamp: 1554927200000, \r\n    color: [255, 255, 255],\r\n    intensity: 1,\r\n    _shadow: true\r\n});\r\n\r\nconst ambientLight = new AmbientLight({\r\n    color: [180,220,220],\r\n    intensity: 3\r\n});\r\n\r\nconst colorScale = d3.scaleLinear()\r\n    .domain([\r\n        0,\r\n        .03,\r\n        .05,\r\n        .10,\r\n        .15,\r\n        .20,\r\n        .25,\r\n        1000\r\n    ])\r\n    .range([\r\n        '#0D0887',\r\n        '#5C01A6',\r\n        '#9C179E',\r\n        '#CB4679',\r\n        '#ED7953',\r\n        '#FDB42F',\r\n        '#F0F921',\r\n        '#F0F921'\r\n    ])\r\n\r\nconst handleColor = (val) => {\r\n    let color = d3.color(colorScale(val))\r\n    if (color === null) return [240,240,240]\r\n    return [color.r, color.g, color.b, 150]\r\n}\r\n\r\n/* eslint-disable react/no-deprecated */\r\nconst Map = () => {\r\n\r\n    const [initialViewState, setInitialViewState] = useState({\r\n        latitude: 38,\r\n        longitude: -87,\r\n        zoom: 4.5,\r\n        pitch:45,\r\n        bearing:-30\r\n    });\r\n\r\n    const [effects] = useState(() => {\r\n        const lightingEffect = new LightingEffect({dirLight, ambientLight});\r\n        lightingEffect.shadowColor = [0, 0, 0, 0.15];\r\n        return [lightingEffect];\r\n        });\r\n    \r\n    const [currDate, setCurrDate] = useState(['2020-03-02'])\r\n    const [oldDate, setOldDate] = useState(['2020-03-01'])\r\n    const [timerId, setTimerId] = useState(null)\r\n    const [timerId2, setTimerId2] = useState(null)\r\n    const [centroidData, setCentroidData] = useState([])\r\n    const [counter, setCounter] = useState(0)\r\n\r\n    useEffect(() => {\r\n        d3.csv(`${process.env.PUBLIC_URL}/data/centroids_testing.csv`, d3.autoType)\r\n            .then(data => { setCentroidData(data) })\r\n    },[])\r\n    \r\n    const PlayAnimation = () => {\r\n        setCurrDate(['2020-03-02'])\r\n        setOldDate(['2020-03-01'])\r\n        setTimerId(setInterval(() => {\r\n            setCurrDate(t => {\r\n                if (t < '2021-01-19') {\r\n                    var a = moment(t, 'YYYY-MM-DD')\r\n                    setOldDate(a.format().slice(0,10))\r\n                    a = a.add(1, 'day')\r\n                    return a.format().slice(0,10)\r\n                } else {\r\n                    setTimerId(null)\r\n                    setTimerId2(null)\r\n                    return t\r\n                }\r\n            })\r\n        }, 100))\r\n\r\n        setTimerId2(setInterval(() => {\r\n            setCounter( t => t >= 99 ? 0 : t+5)\r\n        },5))\r\n    }\r\n\r\n    const layers =  [ \r\n        new SolidPolygonLayer({\r\n            id: 'background',\r\n            data: [\r\n                [[-135, 55], [-60, 55], [-60, 15], [-135, 15]]\r\n            ],\r\n            opacity: 1,\r\n            getPolygon: d => d,\r\n            stroked: false,\r\n            filled: true,\r\n            getFillColor: [15,15,15],\r\n        }),\r\n        new SimpleMeshLayer({\r\n            id: 'mesh-layer',\r\n            data: centroidData,\r\n            mesh: geom,\r\n            wireframe: true,\r\n            getPosition: d => [d.x,d.y],\r\n            getColor: d => {\r\n                let tempVal = d[`pos_${currDate}`]*(counter/100)+(d[`pos_${currDate}`]*((100-counter)/100))\r\n                return handleColor(tempVal)\r\n            },\r\n            getScale: d => [2500, 2500, (d[`pos_${currDate}`]*(counter/100)+(d[`pos_${currDate}`]*((100-counter)/100)))*1000000],\r\n            // getScale: d => [(d[`tcap_${currDate}`]*(counter/100)+(d[`tcap_${currDate}`]*((100-counter)/100)))*20,\r\n            //                 (d[`tcap_${currDate}`]*(counter/100)+(d[`tcap_${currDate}`]*((100-counter)/100)))*20, \r\n            //                 (d[`tcap_${currDate}`]*(counter/100)+(d[`tcap_${currDate}`]*((100-counter)/100)))*100], \r\n            updateTriggers: {\r\n                getTranslation: [currDate],\r\n                getScale: [currDate, counter],\r\n                getColor: [currDate, counter]\r\n            }\r\n        }),\r\n    ]\r\n\r\n    return (\r\n        <MapContainer>\r\n            <Button onClick={PlayAnimation} id=\"playButton\">Play</Button>\r\n            <div id=\"title\">\r\n                <h1>COVID Testing Positivity Rates</h1>\r\n                <h2>7-Day Rolling Average of {currDate}</h2>\r\n            </div>\r\n            <DeckGL \r\n                layers={layers} \r\n                initialViewState={initialViewState} \r\n                effects={effects}\r\n                controller={true}>\r\n            </DeckGL>\r\n        </MapContainer>\r\n    )\r\n}\r\n\r\nexport default Map","import React, {useState, useCallback} from 'react';\nimport Map from './components/Map';\nimport './App.css';\n\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}